2019-06-18 11:54:01.195  INFO 4460 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 4460 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 11:54:01.205 DEBUG 4460 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 11:54:01.215  INFO 4460 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 11:54:01.465  INFO 4460 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 11:54:01.465  INFO 4460 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 11:54:03.665  INFO 4460 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 11:54:03.845  INFO 4460 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 150ms. Found 1 repository interfaces.
2019-06-18 11:54:04.435  INFO 4460 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6834b382] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 11:54:05.335  INFO 4460 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 11:54:05.375  INFO 4460 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 11:54:05.375  INFO 4460 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 11:54:05.785  INFO 4460 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 11:54:05.785  INFO 4460 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4320 ms
2019-06-18 11:54:06.245  INFO 4460 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 11:54:09.435 ERROR 4460 --- [restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

org.h2.jdbc.JdbcSQLException: Połączenie uszkodzone: "java.net.ConnectException: Connection refused: connect: localhost"
Connection is broken: "java.net.ConnectException: Connection refused: connect: localhost" [90067-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.message.DbException.get(DbException.java:168) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:451) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:332) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:124) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:103) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.Driver.connect(Driver.java:69) ~[h2-1.4.197.jar:1.4.197]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467) [HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541) [HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) [HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.2.0.jar:na]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157) [spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115) [spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78) [spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319) [spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356) [spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:113) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$870b75f1.CGLIB$jpaVendorAdapter$4(<generated>) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$870b75f1$$FastClassBySpringCGLIB$$ec7f1289.invoke(<generated>) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) [spring-core-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) [spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$870b75f1.jpaVendorAdapter(<generated>) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at com.rybickim.javaquiz.JavaQuizApplication.main(JavaQuizApplication.java:19) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.1.4.RELEASE.jar:2.1.4.RELEASE]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.base/java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:na]
	at java.base/java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:400) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:243) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:225) ~[na:na]
	at java.base/java.net.PlainSocketImpl.connect(PlainSocketImpl.java:148) ~[na:na]
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:402) ~[na:na]
	at java.base/java.net.Socket.connect(Socket.java:591) ~[na:na]
	at org.h2.util.NetUtils.createSocket(NetUtils.java:103) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.util.NetUtils.createSocket(NetUtils.java:83) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.initTransfer(SessionRemote.java:114) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:447) ~[h2-1.4.197.jar:1.4.197]
	... 82 common frames omitted

2019-06-18 11:54:09.445  WARN 4460 --- [restartedMain] o.s.b.a.orm.jpa.DatabaseLookup           : Unable to determine jdbc url from datasource

org.springframework.jdbc.support.MetaDataAccessException: Could not get Connection for extracting meta-data; nested exception is org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is org.h2.jdbc.JdbcSQLException: Połączenie uszkodzone: "java.net.ConnectException: Connection refused: connect: localhost"
Connection is broken: "java.net.ConnectException: Connection refused: connect: localhost" [90067-197]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:328) ~[spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356) ~[spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73) ~[spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:113) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$870b75f1.CGLIB$jpaVendorAdapter$4(<generated>) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$870b75f1$$FastClassBySpringCGLIB$$ec7f1289.invoke(<generated>) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) [spring-core-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) [spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$870b75f1.jpaVendorAdapter(<generated>) [spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at com.rybickim.javaquiz.JavaQuizApplication.main(JavaQuizApplication.java:19) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.1.4.RELEASE.jar:2.1.4.RELEASE]
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is org.h2.jdbc.JdbcSQLException: Połączenie uszkodzone: "java.net.ConnectException: Connection refused: connect: localhost"
Connection is broken: "java.net.ConnectException: Connection refused: connect: localhost" [90067-197]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81) ~[spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319) ~[spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	... 67 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLException: Połączenie uszkodzone: "java.net.ConnectException: Connection refused: connect: localhost"
Connection is broken: "java.net.ConnectException: Connection refused: connect: localhost" [90067-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.message.DbException.get(DbException.java:168) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:451) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:332) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:124) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:103) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.Driver.connect(Driver.java:69) ~[h2-1.4.197.jar:1.4.197]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-3.2.0.jar:na]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157) ~[spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115) ~[spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78) ~[spring-jdbc-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	... 68 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.base/java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:na]
	at java.base/java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:400) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:243) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:225) ~[na:na]
	at java.base/java.net.PlainSocketImpl.connect(PlainSocketImpl.java:148) ~[na:na]
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:402) ~[na:na]
	at java.base/java.net.Socket.connect(Socket.java:591) ~[na:na]
	at org.h2.util.NetUtils.createSocket(NetUtils.java:103) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.util.NetUtils.createSocket(NetUtils.java:83) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.initTransfer(SessionRemote.java:114) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:447) ~[h2-1.4.197.jar:1.4.197]
	... 82 common frames omitted

2019-06-18 11:54:09.515  INFO 4460 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 11:54:09.614  INFO 4460 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 11:54:09.614  INFO 4460 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 11:54:10.174  INFO 4460 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 11:54:10.444  INFO 4460 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 11:54:13.514 ERROR 4460 --- [restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

org.h2.jdbc.JdbcSQLException: Połączenie uszkodzone: "java.net.ConnectException: Connection refused: connect: localhost"
Connection is broken: "java.net.ConnectException: Connection refused: connect: localhost" [90067-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.message.DbException.get(DbException.java:168) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:451) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:332) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:124) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:103) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.Driver.connect(Driver.java:69) ~[h2-1.4.197.jar:1.4.197]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198) ~[HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467) [HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541) [HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) [HikariCP-3.2.0.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.2.0.jar:na]
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935) [hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57) [spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365) [spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390) [spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377) [spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341) [spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at com.rybickim.javaquiz.JavaQuizApplication.main(JavaQuizApplication.java:19) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.1.4.RELEASE.jar:2.1.4.RELEASE]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.base/java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:na]
	at java.base/java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:400) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:243) ~[na:na]
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:225) ~[na:na]
	at java.base/java.net.PlainSocketImpl.connect(PlainSocketImpl.java:148) ~[na:na]
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:402) ~[na:na]
	at java.base/java.net.Socket.connect(Socket.java:591) ~[na:na]
	at org.h2.util.NetUtils.createSocket(NetUtils.java:103) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.util.NetUtils.createSocket(NetUtils.java:83) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.initTransfer(SessionRemote.java:114) ~[h2-1.4.197.jar:1.4.197]
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:447) ~[h2-1.4.197.jar:1.4.197]
	... 55 common frames omitted

2019-06-18 11:54:13.514  WARN 4460 --- [restartedMain] o.h.e.j.e.i.JdbcEnvironmentInitiator     : HHH000342: Could not obtain connection to query metadata : Połączenie uszkodzone: "java.net.ConnectException: Connection refused: connect: localhost"
Connection is broken: "java.net.ConnectException: Connection refused: connect: localhost" [90067-197]
2019-06-18 11:54:13.524  WARN 4460 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
2019-06-18 11:54:13.524  INFO 4460 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2019-06-18 11:54:13.554  INFO 4460 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-18 11:54:13.564 ERROR 4460 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1778) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at com.rybickim.javaquiz.JavaQuizApplication.main(JavaQuizApplication.java:19) [classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.1.4.RELEASE.jar:2.1.4.RELEASE]
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:275) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	... 21 common frames omitted
Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:100) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:54) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:137) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263) ~[hibernate-core-5.3.9.Final.jar:5.3.9.Final]
	... 38 common frames omitted

2019-06-18 11:57:17.129  INFO 13160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 13160 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 11:57:17.139 DEBUG 13160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 11:57:17.139  INFO 13160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 11:57:17.249  INFO 13160 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 11:57:17.249  INFO 13160 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 11:57:19.259  INFO 13160 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 11:57:19.429  INFO 13160 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 130ms. Found 1 repository interfaces.
2019-06-18 11:57:20.069  INFO 13160 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1a1e9b3d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 11:57:20.769  INFO 13160 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 11:57:20.829  INFO 13160 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 11:57:20.829  INFO 13160 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 11:57:21.119  INFO 13160 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 11:57:21.119  INFO 13160 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3870 ms
2019-06-18 11:57:24.918  INFO 13160 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 11:57:25.178  INFO 13160 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 11:57:25.328  INFO 13160 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 11:57:25.478  INFO 13160 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 11:57:25.478  INFO 13160 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 11:57:25.818  INFO 13160 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 11:57:26.068  INFO 13160 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 11:57:27.248  INFO 13160 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 11:57:27.328  INFO 13160 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 11:57:27.678 DEBUG 13160 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@17bd300
2019-06-18 11:57:27.688 DEBUG 13160 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 11:57:27.788  INFO 13160 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 11:57:28.358 DEBUG 13160 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 11:57:28.398 DEBUG 13160 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@7344eab1
2019-06-18 11:57:28.398 DEBUG 13160 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@4500782d
2019-06-18 11:57:28.808  INFO 13160 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 11:57:28.848  WARN 13160 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 11:57:29.208 ERROR 13160 --- [restartedMain] org.apache.catalina.util.LifecycleBase   : Failed to start component [Connector[HTTP/1.1-8080]]

org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1008) ~[tomcat-embed-core-9.0.17.jar:9.0.17]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.17.jar:9.0.17]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:226) [tomcat-embed-core-9.0.17.jar:9.0.17]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:259) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:197) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:311) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:164) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552) [spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at com.rybickim.javaquiz.JavaQuizApplication.main(JavaQuizApplication.java:19) [classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.1.4.RELEASE.jar:2.1.4.RELEASE]
Caused by: java.net.BindException: Address already in use: bind
	at java.base/sun.nio.ch.Net.bind0(Native Method) ~[na:na]
	at java.base/sun.nio.ch.Net.bind(Net.java:433) ~[na:na]
	at java.base/sun.nio.ch.Net.bind(Net.java:425) ~[na:na]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:225) ~[na:na]
	at java.base/sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74) ~[na:na]
	at org.apache.tomcat.util.net.NioEndpoint.initServerSocket(NioEndpoint.java:236) ~[tomcat-embed-core-9.0.17.jar:9.0.17]
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210) ~[tomcat-embed-core-9.0.17.jar:9.0.17]
	at org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1103) ~[tomcat-embed-core-9.0.17.jar:9.0.17]
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1189) ~[tomcat-embed-core-9.0.17.jar:9.0.17]
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:568) ~[tomcat-embed-core-9.0.17.jar:9.0.17]
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1005) ~[tomcat-embed-core-9.0.17.jar:9.0.17]
	... 19 common frames omitted

2019-06-18 11:57:29.208  INFO 13160 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2019-06-18 11:57:29.248  INFO 13160 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-18 11:57:29.248 ERROR 13160 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 8080, or configure this application to listen on another port.

2019-06-18 11:57:29.258  INFO 13160 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-06-18 11:57:29.258  INFO 13160 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 11:57:29.258  INFO 13160 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2019-06-18 11:57:29.288  INFO 13160 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2019-06-18 11:58:30.882  INFO 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 13648 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 11:58:30.882 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 11:58:30.882  INFO 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 11:58:31.032  INFO 13648 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 11:58:31.042  INFO 13648 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 11:58:32.652  INFO 13648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 11:58:32.742  INFO 13648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 11:58:33.132  INFO 13648 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1eaf28f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 11:58:33.591  INFO 13648 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 11:58:33.631  INFO 13648 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 11:58:33.631  INFO 13648 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 11:58:33.861  INFO 13648 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 11:58:33.861  INFO 13648 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2819 ms
2019-06-18 11:58:34.042  INFO 13648 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 11:58:34.122  INFO 13648 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 11:58:34.192  INFO 13648 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 11:58:34.252  INFO 13648 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 11:58:34.252  INFO 13648 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 11:58:34.442  INFO 13648 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 11:58:34.592  INFO 13648 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 11:58:35.312  INFO 13648 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 11:58:35.392  INFO 13648 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 11:58:35.672 DEBUG 13648 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@788a85f
2019-06-18 11:58:35.672 DEBUG 13648 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 11:58:35.712  INFO 13648 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 11:58:35.802 DEBUG 13648 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 11:58:35.822 DEBUG 13648 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@e959ace
2019-06-18 11:58:35.822 DEBUG 13648 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@229c1955
2019-06-18 11:58:36.112  INFO 13648 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 11:58:36.152  WARN 13648 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 11:58:36.452  INFO 13648 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 11:58:36.472  INFO 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.3 seconds (JVM running for 8.374)
2019-06-18 11:58:36.582 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 11:58:36.582 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 11:58:36.602 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 11:58:36.612 DEBUG 13648 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 11:58:50.255  INFO 13648 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 11:58:50.255  INFO 13648 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 11:58:50.305  INFO 13648 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 50 ms
2019-06-18 11:58:50.491 DEBUG 13648 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 11:58:50.491 DEBUG 13648 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 11:58:50.492 DEBUG 13648 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 11:58:50.492 DEBUG 13648 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 11:59:49.914 DEBUG 13648 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 11:59:49.915 DEBUG 13648 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 11:59:49.916 DEBUG 13648 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 11:59:49.916 DEBUG 13648 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 11:59:50.727 DEBUG 13648 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 11:59:50.727 DEBUG 13648 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 11:59:50.728 DEBUG 13648 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 11:59:50.728 DEBUG 13648 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:04:30.616 DEBUG 13648 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:04:30.618 DEBUG 13648 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 12:04:30.618 DEBUG 13648 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:04:30.619 DEBUG 13648 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:04:32.156 DEBUG 13648 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:04:32.157 DEBUG 13648 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:14:10.373  INFO 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 3176 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:14:10.381 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:14:10.382  INFO 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:14:10.471  INFO 3176 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:14:10.471  INFO 3176 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:14:12.137  INFO 3176 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:14:12.263  INFO 3176 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 115ms. Found 1 repository interfaces.
2019-06-18 12:14:12.918  INFO 3176 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$69db7bed] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:14:13.492  INFO 3176 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:14:13.523  INFO 3176 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:14:13.523  INFO 3176 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:14:13.751  INFO 3176 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:14:13.752  INFO 3176 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3280 ms
2019-06-18 12:14:13.981  INFO 3176 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:14:14.058  INFO 3176 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:14:14.134  INFO 3176 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:14:14.255  INFO 3176 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:14:14.257  INFO 3176 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:14:14.488  INFO 3176 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:14:14.819  INFO 3176 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:14:15.567  INFO 3176 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:14:15.616  INFO 3176 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:14:15.881 DEBUG 3176 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@24f4eddf
2019-06-18 12:14:15.882 DEBUG 3176 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:14:15.934  INFO 3176 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:14:16.042 DEBUG 3176 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 12:14:16.058 DEBUG 3176 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@2656b6b2
2019-06-18 12:14:16.058 DEBUG 3176 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@263f0961
2019-06-18 12:14:16.326  INFO 3176 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:14:16.361  WARN 3176 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:14:16.652  INFO 3176 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:14:16.659  INFO 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.856 seconds (JVM running for 8.791)
2019-06-18 12:14:16.726 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:14:16.726 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:14:16.744 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:14:16.744 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:14:16.744 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:14:16.746 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:14:16.746 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:14:16.746 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:14:16.747 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:14:16.747 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:14:16.747 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:14:16.747 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:14:16.747 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:14:16.748 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:14:16.748 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:14:16.748 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:14:16.748 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:14:16.748 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:14:16.748 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:14:16.749 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:14:16.749 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:14:16.749 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:14:16.749 DEBUG 3176 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:14:22.738  INFO 3176 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:14:22.739  INFO 3176 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:14:22.752  INFO 3176 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2019-06-18 12:14:22.779 DEBUG 3176 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:14:22.780 DEBUG 3176 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 16
2019-06-18 12:14:22.780 DEBUG 3176 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:14:22.780 DEBUG 3176 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:14:39.449 DEBUG 3176 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:14:39.450 DEBUG 3176 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 16
2019-06-18 12:14:39.450 DEBUG 3176 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:14:39.450 DEBUG 3176 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:14:39.468 DEBUG 3176 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:14:39.469 DEBUG 3176 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 16
2019-06-18 12:14:39.470 DEBUG 3176 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:14:39.470 DEBUG 3176 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:14:53.696 DEBUG 3176 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:14:53.696 DEBUG 3176 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:29:22.702  INFO 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 2156 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:29:22.712 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:29:22.712  INFO 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:29:22.832  INFO 2156 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:29:22.832  INFO 2156 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:29:24.492  INFO 2156 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:29:24.582  INFO 2156 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 12:29:24.992  INFO 2156 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fd65ea53] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:29:25.452  INFO 2156 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:29:25.492  INFO 2156 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:29:25.492  INFO 2156 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:29:25.762  INFO 2156 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:29:25.762  INFO 2156 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2930 ms
2019-06-18 12:29:25.922  INFO 2156 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:29:25.972  INFO 2156 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:29:26.042  INFO 2156 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:29:26.102  INFO 2156 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:29:26.102  INFO 2156 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:29:26.232  INFO 2156 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:29:26.382  INFO 2156 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:29:27.002  INFO 2156 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:29:27.132  INFO 2156 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:29:27.422 DEBUG 2156 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@6f3e967e
2019-06-18 12:29:27.422 DEBUG 2156 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:29:27.462  INFO 2156 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:29:27.582 DEBUG 2156 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.)]
2019-06-18 12:29:27.612 DEBUG 2156 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@1cae47b
2019-06-18 12:29:27.612 DEBUG 2156 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@6512adb9
2019-06-18 12:29:27.912  INFO 2156 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:29:27.942  WARN 2156 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:29:28.302  INFO 2156 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:29:28.302  INFO 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.32 seconds (JVM running for 8.623)
2019-06-18 12:29:28.352 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:29:28.352 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:29:28.372 DEBUG 2156 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:29:33.965  INFO 2156 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:29:33.966  INFO 2156 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:29:33.974  INFO 2156 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2019-06-18 12:29:34.002 DEBUG 2156 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:29:34.002 DEBUG 2156 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 20
2019-06-18 12:29:34.003 DEBUG 2156 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:29:34.003 DEBUG 2156 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:29:36.697 DEBUG 2156 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:29:36.698 DEBUG 2156 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 20
2019-06-18 12:29:36.698 DEBUG 2156 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:29:36.698 DEBUG 2156 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:29:38.536 DEBUG 2156 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:29:38.536 DEBUG 2156 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:33:13.321  INFO 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 1276 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:33:13.321 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:33:13.321  INFO 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:33:13.411  INFO 1276 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:33:13.411  INFO 1276 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:33:15.344  INFO 1276 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:33:15.434  INFO 1276 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 12:33:15.814  INFO 1276 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$134936e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:33:16.254  INFO 1276 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:33:16.294  INFO 1276 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:33:16.294  INFO 1276 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:33:16.524  INFO 1276 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:33:16.524  INFO 1276 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3113 ms
2019-06-18 12:33:16.694  INFO 1276 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:33:16.754  INFO 1276 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:33:16.824  INFO 1276 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:33:16.884  INFO 1276 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:33:16.884  INFO 1276 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:33:17.004  INFO 1276 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:33:17.154  INFO 1276 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:33:17.744  INFO 1276 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:33:17.824  INFO 1276 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:33:18.134 DEBUG 1276 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@4ef82e1d
2019-06-18 12:33:18.134 DEBUG 1276 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:33:18.174  INFO 1276 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:33:18.314 DEBUG 1276 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.)]
2019-06-18 12:33:18.324 DEBUG 1276 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@60f39683
2019-06-18 12:33:18.324 DEBUG 1276 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@1587daed
2019-06-18 12:33:18.544  INFO 1276 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:33:18.594  WARN 1276 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:33:18.904  INFO 1276 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:33:18.904  INFO 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.163 seconds (JVM running for 8.29)
2019-06-18 12:33:18.964 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:33:18.964 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:33:18.984 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:33:18.984 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:33:18.984 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:33:18.984 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:33:18.994 DEBUG 1276 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:33:22.593  INFO 1276 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:33:22.595  INFO 1276 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:33:22.605  INFO 1276 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2019-06-18 12:33:22.639 DEBUG 1276 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:33:22.639 DEBUG 1276 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 24
2019-06-18 12:33:22.639 DEBUG 1276 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 12:33:22.640 DEBUG 1276 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 12:33:24.342 DEBUG 1276 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:33:24.343 DEBUG 1276 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 24
2019-06-18 12:33:24.344 DEBUG 1276 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 12:33:24.345 DEBUG 1276 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 12:33:25.366 DEBUG 1276 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:33:25.367 DEBUG 1276 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:33:44.196 DEBUG 1276 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:33:44.197 DEBUG 1276 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 23
2019-06-18 12:33:44.198 DEBUG 1276 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:33:44.198 DEBUG 1276 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:33:46.831 DEBUG 1276 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:33:46.832 DEBUG 1276 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 23
2019-06-18 12:33:46.833 DEBUG 1276 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:33:46.833 DEBUG 1276 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:33:50.884 DEBUG 1276 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:33:50.885 DEBUG 1276 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:37:26.698  INFO 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 13060 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:37:26.698 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:37:26.698  INFO 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:37:26.808  INFO 13060 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:37:26.808  INFO 13060 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:37:28.348  INFO 13060 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:37:28.448  INFO 13060 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 100ms. Found 1 repository interfaces.
2019-06-18 12:37:28.888  INFO 13060 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fd269b43] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:37:29.348  INFO 13060 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:37:29.378  INFO 13060 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:37:29.378  INFO 13060 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:37:29.608  INFO 13060 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:37:29.608  INFO 13060 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2800 ms
2019-06-18 12:37:29.768  INFO 13060 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:37:29.828  INFO 13060 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:37:29.898  INFO 13060 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:37:29.968  INFO 13060 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:37:29.968  INFO 13060 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:37:30.088  INFO 13060 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:37:30.238  INFO 13060 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:37:30.868  INFO 13060 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:37:30.928  INFO 13060 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:37:31.158 DEBUG 13060 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@457f91be
2019-06-18 12:37:31.158 DEBUG 13060 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:37:31.188  INFO 13060 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:37:31.288 DEBUG 13060 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 12:37:31.308 DEBUG 13060 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@5fe8a61e
2019-06-18 12:37:31.308 DEBUG 13060 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@73acc8f0
2019-06-18 12:37:31.598  INFO 13060 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:37:31.628  WARN 13060 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:37:31.928  INFO 13060 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:37:31.928  INFO 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.02 seconds (JVM running for 7.868)
2019-06-18 12:37:31.998 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:37:31.998 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:37:32.028 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:37:32.028 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:37:32.028 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:37:32.028 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:37:32.028 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:37:32.028 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=29, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=30, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=31, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=32, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:37:32.038 DEBUG 13060 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:37:36.997  INFO 13060 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:37:37.000  INFO 13060 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:37:37.018  INFO 13060 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2019-06-18 12:37:37.077 DEBUG 13060 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:37:37.077 DEBUG 13060 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 28
2019-06-18 12:37:37.078 DEBUG 13060 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:37:37.078 DEBUG 13060 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:38:29.928  INFO 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 9100 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:38:29.938 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:38:29.938  INFO 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:38:30.148  INFO 9100 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:38:30.148  INFO 9100 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:38:31.698  INFO 9100 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:38:31.788  INFO 9100 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 12:38:32.168  INFO 9100 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$973fe423] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:38:32.658  INFO 9100 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:38:32.718  INFO 9100 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:38:32.718  INFO 9100 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:38:33.217  INFO 9100 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:38:33.217  INFO 9100 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3069 ms
2019-06-18 12:38:33.377  INFO 9100 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:38:33.427  INFO 9100 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:38:33.497  INFO 9100 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:38:33.547  INFO 9100 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:38:33.557  INFO 9100 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:38:33.677  INFO 9100 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:38:33.867  INFO 9100 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:38:34.537  INFO 9100 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:38:34.607  INFO 9100 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:38:34.877 DEBUG 9100 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@4eb2dfbe
2019-06-18 12:38:34.877 DEBUG 9100 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:38:34.917  INFO 9100 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:38:35.017 DEBUG 9100 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 12:38:35.037 DEBUG 9100 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@25938aeb
2019-06-18 12:38:35.037 DEBUG 9100 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@1f300ecf
2019-06-18 12:38:35.267  INFO 9100 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:38:35.297  WARN 9100 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:38:35.587  INFO 9100 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:38:35.587  INFO 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.359 seconds (JVM running for 8.253)
2019-06-18 12:38:35.627 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:38:35.627 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:38:35.647 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.647 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.647 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=29, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=30, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=31, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=32, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=33, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=34, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=35, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=36, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:38:35.657 DEBUG 9100 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:38:48.256  INFO 9100 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:38:48.257  INFO 9100 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:38:48.271  INFO 9100 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2019-06-18 12:38:48.335 DEBUG 9100 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:38:48.335 DEBUG 9100 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 32
2019-06-18 12:38:48.335 DEBUG 9100 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 12:38:48.336 DEBUG 9100 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 12:39:07.170 DEBUG 9100 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:39:07.171 DEBUG 9100 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 32
2019-06-18 12:39:07.172 DEBUG 9100 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 12:39:07.172 DEBUG 9100 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 12:39:08.195 DEBUG 9100 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:39:08.195 DEBUG 9100 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:42:26.042  INFO 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 14160 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:42:26.072 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:42:26.072  INFO 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:42:26.212  INFO 14160 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:42:26.212  INFO 14160 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:42:27.631  INFO 14160 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:42:27.721  INFO 14160 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 12:42:28.121  INFO 14160 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$162a33e0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:42:28.561  INFO 14160 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:42:28.611  INFO 14160 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:42:28.611  INFO 14160 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:42:28.831  INFO 14160 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:42:28.831  INFO 14160 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2619 ms
2019-06-18 12:42:28.991  INFO 14160 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:42:29.061  INFO 14160 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:42:29.121  INFO 14160 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:42:29.171  INFO 14160 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:42:29.171  INFO 14160 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:42:29.301  INFO 14160 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:42:29.451  INFO 14160 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:42:30.091  INFO 14160 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:42:30.141  INFO 14160 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:42:30.401 DEBUG 14160 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@7d13df53
2019-06-18 12:42:30.401 DEBUG 14160 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:42:30.441  INFO 14160 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:42:30.551 DEBUG 14160 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 12:42:30.571 DEBUG 14160 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@3be51ed3
2019-06-18 12:42:30.571 DEBUG 14160 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@69e5b8ac
2019-06-18 12:42:30.821  INFO 14160 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:42:30.861  WARN 14160 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:42:31.151  INFO 14160 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:42:31.161  INFO 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 5.959 seconds (JVM running for 7.756)
2019-06-18 12:42:31.211 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:42:31.211 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=29, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=30, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=31, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=32, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=33, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=34, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=35, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=36, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=37, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=38, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=39, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=40, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:42:31.231 DEBUG 14160 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:42:39.108  INFO 14160 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:42:39.109  INFO 14160 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:42:39.125  INFO 14160 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2019-06-18 12:42:39.181 DEBUG 14160 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:42:39.181 DEBUG 14160 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 36
2019-06-18 12:42:39.181 DEBUG 14160 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:42:39.182 DEBUG 14160 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:43:04.639 DEBUG 14160 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:43:04.640 DEBUG 14160 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 36
2019-06-18 12:43:04.640 DEBUG 14160 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 12:43:04.640 DEBUG 14160 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 12:43:06.933 DEBUG 14160 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:43:06.933 DEBUG 14160 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:44:25.372  WARN 2032 --- [main] ory$DuplicateJsonObjectContextCustomizer : 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/C:/Users/laboratorium/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class
	jar:file:/C:/Users/laboratorium/.m2/repository/org/json/json/20180813/json-20180813.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2019-06-18 12:44:25.402  INFO 2032 --- [main] c.r.javaquiz.JavaQuizApplicationTests    : Starting JavaQuizApplicationTests on 4-91-01-049983kozicki with PID 2032 (started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:44:25.402 DEBUG 2032 --- [main] c.r.javaquiz.JavaQuizApplicationTests    : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:44:25.412  INFO 2032 --- [main] c.r.javaquiz.JavaQuizApplicationTests    : No active profile set, falling back to default profiles: default
2019-06-18 12:44:27.462  INFO 2032 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:44:27.612  INFO 2032 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 140ms. Found 1 repository interfaces.
2019-06-18 12:44:28.442  INFO 2032 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e79f7f56] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:44:29.102  INFO 2032 --- [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:44:29.262  INFO 2032 --- [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:44:29.412  INFO 2032 --- [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:44:29.632  INFO 2032 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:44:29.642  INFO 2032 --- [main] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:44:30.022  INFO 2032 --- [main] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:44:30.492  INFO 2032 --- [main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:44:32.712  INFO 2032 --- [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:44:33.302 DEBUG 2032 --- [main] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@f2becb2
2019-06-18 12:44:33.302 DEBUG 2032 --- [main] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:44:33.552  INFO 2032 --- [main] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:44:34.102 DEBUG 2032 --- [main] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 12:44:34.172 DEBUG 2032 --- [main] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@7438c3d5
2019-06-18 12:44:34.172 DEBUG 2032 --- [main] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@5939f047
2019-06-18 12:44:35.621  INFO 2032 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:44:35.821  WARN 2032 --- [main] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:44:36.661  INFO 2032 --- [main] c.r.javaquiz.JavaQuizApplicationTests    : Started JavaQuizApplicationTests in 12.058 seconds (JVM running for 14.755)
2019-06-18 12:44:36.761 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:44:36.761 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:44:36.791 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.801 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.801 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.801 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=29, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=30, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.811 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=31, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=32, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=33, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=34, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=35, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=36, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=37, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=38, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=39, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=40, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.821 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=41, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:44:36.851 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=42, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:44:36.851 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=43, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:44:36.851 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=44, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:44:36.851 DEBUG 2032 --- [main] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:44:37.511  INFO 2032 --- [Thread-2] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-06-18 12:44:37.521  INFO 2032 --- [Thread-2] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:44:37.531  INFO 2032 --- [Thread-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2019-06-18 12:44:37.561  INFO 2032 --- [Thread-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2019-06-18 12:45:30.165  INFO 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 9708 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:45:30.165 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:45:30.165  INFO 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:45:30.255  INFO 9708 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:45:30.255  INFO 9708 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:45:31.825  INFO 9708 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:45:31.935  INFO 9708 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 110ms. Found 1 repository interfaces.
2019-06-18 12:45:32.465  INFO 9708 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8da85c1c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:45:32.935  INFO 9708 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:45:32.985  INFO 9708 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:45:32.985  INFO 9708 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:45:33.255  INFO 9708 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:45:33.255  INFO 9708 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3000 ms
2019-06-18 12:45:33.455  INFO 9708 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:45:33.515  INFO 9708 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:45:33.605  INFO 9708 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:45:33.675  INFO 9708 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:45:33.675  INFO 9708 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:45:33.805  INFO 9708 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:45:33.945  INFO 9708 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:45:34.505  INFO 9708 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:45:34.555  INFO 9708 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:45:34.785 DEBUG 9708 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@2047774f
2019-06-18 12:45:34.785 DEBUG 9708 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:45:34.825  INFO 9708 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:45:34.925 DEBUG 9708 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 12:45:34.935 DEBUG 9708 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@1b7661e9
2019-06-18 12:45:34.935 DEBUG 9708 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@6d5456ec
2019-06-18 12:45:35.175  INFO 9708 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:45:35.205  WARN 9708 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:45:35.475  INFO 9708 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:45:35.475  INFO 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 5.88 seconds (JVM running for 8.254)
2019-06-18 12:45:35.515 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:45:35.515 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=29, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=30, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=31, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=32, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=33, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=34, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=35, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=36, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=37, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=38, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=39, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=40, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=41, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=42, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=43, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=44, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=45, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=46, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=47, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=48, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:45:35.535 DEBUG 9708 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:45:48.052  INFO 9708 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:45:48.053  INFO 9708 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:45:48.065  INFO 9708 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2019-06-18 12:45:48.107 DEBUG 9708 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:45:48.108 DEBUG 9708 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 44
2019-06-18 12:45:48.108 DEBUG 9708 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 12:45:48.108 DEBUG 9708 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 12:46:23.949 DEBUG 9708 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:46:23.950 DEBUG 9708 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 44
2019-06-18 12:46:23.951 DEBUG 9708 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 12:46:23.951 DEBUG 9708 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 12:46:25.929 DEBUG 9708 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:46:25.930 DEBUG 9708 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:51:01.205  INFO 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 13856 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:51:01.208 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:51:01.210  INFO 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:51:01.365  INFO 13856 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:51:01.365  INFO 13856 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:51:03.542  INFO 13856 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:51:03.676  INFO 13856 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 125ms. Found 1 repository interfaces.
2019-06-18 12:51:04.196  INFO 13856 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$134011b0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:51:04.826  INFO 13856 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:51:04.866  INFO 13856 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:51:04.866  INFO 13856 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:51:05.196  INFO 13856 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:51:05.196  INFO 13856 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3831 ms
2019-06-18 12:51:05.456  INFO 13856 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:51:05.516  INFO 13856 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:51:05.616  INFO 13856 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:51:05.776  INFO 13856 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:51:05.776  INFO 13856 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:51:06.006  INFO 13856 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:51:06.276  INFO 13856 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:51:07.146  INFO 13856 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:51:07.206  INFO 13856 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:51:07.516 DEBUG 13856 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@6dbe109f
2019-06-18 12:51:07.516 DEBUG 13856 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:51:07.686  INFO 13856 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:51:07.826 DEBUG 13856 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 12:51:07.846 DEBUG 13856 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@69b07ff7
2019-06-18 12:51:07.846 DEBUG 13856 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@23002133
2019-06-18 12:51:08.096  INFO 13856 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:51:08.146  WARN 13856 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:51:08.506  INFO 13856 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:51:08.506  INFO 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 8.354 seconds (JVM running for 12.449)
2019-06-18 12:51:08.576 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:51:08.576 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.596 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=29, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=30, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=31, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=32, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=33, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=34, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=35, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=36, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=37, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=38, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=39, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=40, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=41, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=42, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=43, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=44, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=45, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=46, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=47, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=48, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=49, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=50, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=51, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=52, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:51:08.606 DEBUG 13856 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:51:31.572  INFO 13856 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:51:31.573  INFO 13856 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:51:31.603  INFO 13856 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 30 ms
2019-06-18 12:51:31.658 DEBUG 13856 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:51:31.658 DEBUG 13856 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 48
2019-06-18 12:51:31.658 DEBUG 13856 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 12:51:31.658 DEBUG 13856 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 12:51:41.270 DEBUG 13856 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:51:41.271 DEBUG 13856 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 48
2019-06-18 12:51:41.272 DEBUG 13856 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 12:51:41.273 DEBUG 13856 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 12:52:15.925 DEBUG 13856 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:52:15.926 DEBUG 13856 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 48
2019-06-18 12:52:15.927 DEBUG 13856 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 12:52:15.927 DEBUG 13856 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 12:52:45.927  INFO 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 14296 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:52:45.927 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:52:45.927  INFO 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:52:46.076  INFO 14296 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:52:46.076  INFO 14296 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:52:47.695  INFO 14296 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:52:47.795  INFO 14296 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 90ms. Found 1 repository interfaces.
2019-06-18 12:52:48.185  INFO 14296 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9392a5c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:52:48.614  INFO 14296 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:52:48.664  INFO 14296 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:52:48.664  INFO 14296 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:52:48.874  INFO 14296 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:52:48.874  INFO 14296 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2798 ms
2019-06-18 12:52:49.034  INFO 14296 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:52:49.074  INFO 14296 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:52:49.144  INFO 14296 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:52:49.204  INFO 14296 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:52:49.204  INFO 14296 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:52:49.334  INFO 14296 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:52:49.474  INFO 14296 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:52:50.034  INFO 14296 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:52:50.084  INFO 14296 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:52:50.314 DEBUG 14296 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@7fe292b9
2019-06-18 12:52:50.314 DEBUG 14296 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:52:50.354  INFO 14296 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:52:50.464 DEBUG 14296 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 12:52:50.484 DEBUG 14296 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@13f87ba0
2019-06-18 12:52:50.484 DEBUG 14296 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@375ff337
2019-06-18 12:52:50.724  INFO 14296 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:52:50.754  WARN 14296 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:52:51.024  INFO 14296 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:52:51.024  INFO 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 5.827 seconds (JVM running for 7.757)
2019-06-18 12:52:51.064 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:52:51.064 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=29, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=30, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=31, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=32, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=33, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=34, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=35, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=36, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=37, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=38, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=39, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.094 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=40, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=41, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=42, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=43, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=44, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=45, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=46, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=47, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=48, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=49, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=50, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=51, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=52, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=53, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=54, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=55, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=56, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:52:51.104 DEBUG 14296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:52:57.523  INFO 14296 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:52:57.524  INFO 14296 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:52:57.532  INFO 14296 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2019-06-18 12:52:57.557 DEBUG 14296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:52:57.558 DEBUG 14296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 52
2019-06-18 12:52:57.558 DEBUG 14296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 12:52:57.558 DEBUG 14296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 12:53:00.025 DEBUG 14296 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:53:00.026 DEBUG 14296 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 52
2019-06-18 12:53:00.026 DEBUG 14296 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 12:53:00.026 DEBUG 14296 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 12:53:07.681 DEBUG 14296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:53:07.681 DEBUG 14296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 52
2019-06-18 12:53:07.682 DEBUG 14296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 12:53:07.682 DEBUG 14296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 12:53:08.803 DEBUG 14296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:53:08.804 DEBUG 14296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 12:55:08.489  INFO 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 236 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 12:55:08.489 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 12:55:08.489  INFO 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 12:55:08.629  INFO 236 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 12:55:08.629  INFO 236 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 12:55:10.228  INFO 236 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 12:55:10.318  INFO 236 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 12:55:10.728  INFO 236 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a4df518c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 12:55:11.158  INFO 236 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 12:55:11.208  INFO 236 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 12:55:11.208  INFO 236 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 12:55:11.458  INFO 236 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 12:55:11.458  INFO 236 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2829 ms
2019-06-18 12:55:11.618  INFO 236 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 12:55:11.658  INFO 236 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 12:55:11.738  INFO 236 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 12:55:11.788  INFO 236 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 12:55:11.798  INFO 236 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 12:55:11.908  INFO 236 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 12:55:12.058  INFO 236 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 12:55:12.878  INFO 236 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 12:55:12.938  INFO 236 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 12:55:13.198 DEBUG 236 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@57a6de4e
2019-06-18 12:55:13.198 DEBUG 236 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 12:55:13.238  INFO 236 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 12:55:13.358 DEBUG 236 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 12:55:13.368 DEBUG 236 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@789dc1b5
2019-06-18 12:55:13.368 DEBUG 236 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@65810568
2019-06-18 12:55:13.618  INFO 236 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 12:55:13.658  WARN 236 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 12:55:13.978  INFO 236 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 12:55:13.978  INFO 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.199 seconds (JVM running for 8.034)
2019-06-18 12:55:14.058 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 12:55:14.058 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=25, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=26, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=27, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=28, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=29, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=30, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=31, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=32, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=33, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=34, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=35, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=36, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=37, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=38, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=39, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=40, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.098 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=41, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=42, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=43, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=44, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=45, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=46, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=47, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=48, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=49, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=50, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=51, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=52, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=53, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=54, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=55, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=56, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=57, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=58, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=59, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=60, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 12:55:14.108 DEBUG 236 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 12:55:17.975  INFO 236 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 12:55:17.975  INFO 236 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 12:55:17.983  INFO 236 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2019-06-18 12:55:18.012 DEBUG 236 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:55:18.012 DEBUG 236 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 56
2019-06-18 12:55:18.012 DEBUG 236 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 12:55:18.012 DEBUG 236 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 12:55:22.092 DEBUG 236 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:55:22.093 DEBUG 236 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 56
2019-06-18 12:55:22.093 DEBUG 236 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 12:55:22.094 DEBUG 236 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 12:55:25.070 DEBUG 236 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 12:55:25.072 DEBUG 236 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 56
2019-06-18 12:55:25.073 DEBUG 236 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 12:55:25.074 DEBUG 236 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re-usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 12:55:26.059 DEBUG 236 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 12:55:26.060 DEBUG 236 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:01:10.091  INFO 1704 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 1704 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:01:10.094 DEBUG 1704 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:01:10.095  INFO 1704 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:01:10.158  INFO 1704 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:01:10.158  INFO 1704 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:01:11.772  INFO 1704 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:01:11.912  INFO 1704 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 128ms. Found 1 repository interfaces.
2019-06-18 13:01:12.557  INFO 1704 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1f708467] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:01:13.166  INFO 1704 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:01:13.244  INFO 1704 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:01:13.244  INFO 1704 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:01:32.188  INFO 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 13872 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:01:32.188 DEBUG 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:01:32.188  INFO 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:01:32.368  INFO 13872 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:01:32.368  INFO 13872 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:01:34.203  INFO 13872 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:01:34.301  INFO 13872 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 89ms. Found 1 repository interfaces.
2019-06-18 13:01:34.750  INFO 13872 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e1f3b1db] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:01:35.180  INFO 13872 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:01:35.224  INFO 13872 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:01:35.224  INFO 13872 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:01:35.574  INFO 13872 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:01:35.575  INFO 13872 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3207 ms
2019-06-18 13:01:35.839  INFO 13872 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:01:35.973  INFO 13872 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:01:36.061  INFO 13872 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:01:36.167  INFO 13872 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:01:36.169  INFO 13872 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:01:36.375  INFO 13872 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:01:36.591  INFO 13872 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:01:37.573  INFO 13872 --- [restartedMain] o.h.t.schema.internal.SchemaCreatorImpl  : HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@6008aafd'
2019-06-18 13:01:37.578  INFO 13872 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:01:37.650  INFO 13872 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:01:37.980 DEBUG 13872 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@5e40005e
2019-06-18 13:01:37.980 DEBUG 13872 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:01:38.045  INFO 13872 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:01:38.165 DEBUG 13872 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.)]
2019-06-18 13:01:38.181 DEBUG 13872 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@42b8713a
2019-06-18 13:01:38.182 DEBUG 13872 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@646fa79b
2019-06-18 13:01:38.408  INFO 13872 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:01:38.448  WARN 13872 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:01:38.743  INFO 13872 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:01:38.752  INFO 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 7.242 seconds (JVM running for 9.434)
2019-06-18 13:01:38.815 DEBUG 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:01:38.815 DEBUG 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:01:38.838 DEBUG 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:01:38.839 DEBUG 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:01:38.841 DEBUG 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:01:38.841 DEBUG 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:01:38.841 DEBUG 13872 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:01:45.638  INFO 13872 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:01:45.639  INFO 13872 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:01:45.648  INFO 13872 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2019-06-18 13:01:45.677 DEBUG 13872 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:01:45.677 DEBUG 13872 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:01:45.677 DEBUG 13872 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:01:45.678 DEBUG 13872 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:02:29.844  INFO 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 2888 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:02:29.848 DEBUG 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:02:29.849  INFO 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:02:29.979  INFO 2888 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:02:29.981  INFO 2888 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:02:31.598  INFO 2888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:02:31.687  INFO 2888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 81ms. Found 1 repository interfaces.
2019-06-18 13:02:32.078  INFO 2888 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f1253c7d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:02:32.537  INFO 2888 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:02:32.592  INFO 2888 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:02:32.592  INFO 2888 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:02:32.810  INFO 2888 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:02:32.810  INFO 2888 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2829 ms
2019-06-18 13:02:32.972  INFO 2888 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:02:33.033  INFO 2888 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:02:33.089  INFO 2888 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:02:33.153  INFO 2888 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:02:33.154  INFO 2888 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:02:33.270  INFO 2888 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:02:33.411  INFO 2888 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:02:33.949  INFO 2888 --- [restartedMain] o.h.t.schema.internal.SchemaCreatorImpl  : HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@4120c725'
2019-06-18 13:02:33.952  INFO 2888 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:02:34.018  INFO 2888 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:02:34.292 DEBUG 2888 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@42962aed
2019-06-18 13:02:34.293 DEBUG 2888 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:02:34.333  INFO 2888 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:02:34.413 DEBUG 2888 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 13:02:34.431 DEBUG 2888 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@2722f31a
2019-06-18 13:02:34.433 DEBUG 2888 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@1aca4f11
2019-06-18 13:02:34.658  INFO 2888 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:02:34.716  WARN 2888 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:02:35.075  INFO 2888 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:02:35.082  INFO 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 5.891 seconds (JVM running for 7.77)
2019-06-18 13:02:35.143 DEBUG 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:02:35.146 DEBUG 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:02:35.160 DEBUG 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:02:35.161 DEBUG 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:02:35.162 DEBUG 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:02:35.162 DEBUG 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:02:35.162 DEBUG 2888 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:02:40.136  INFO 2888 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:02:40.137  INFO 2888 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:02:40.146  INFO 2888 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2019-06-18 13:02:40.171 DEBUG 2888 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:02:40.172 DEBUG 2888 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:02:40.172 DEBUG 2888 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:02:40.172 DEBUG 2888 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:02:42.398 DEBUG 2888 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:02:42.399 DEBUG 2888 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:02:42.400 DEBUG 2888 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:02:42.400 DEBUG 2888 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:02:43.603 DEBUG 2888 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:04:28.343  INFO 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 7868 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:04:28.349 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:04:28.351  INFO 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:04:28.510  INFO 7868 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:04:28.510  INFO 7868 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:04:30.092  INFO 7868 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:04:30.195  INFO 7868 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 90ms. Found 1 repository interfaces.
2019-06-18 13:04:30.563  INFO 7868 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7d811f10] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:04:31.038  INFO 7868 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:04:31.074  INFO 7868 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:04:31.075  INFO 7868 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:04:31.296  INFO 7868 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:04:31.297  INFO 7868 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2786 ms
2019-06-18 13:04:31.480  INFO 7868 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:04:31.531  INFO 7868 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:04:31.595  INFO 7868 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:04:31.664  INFO 7868 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:04:31.666  INFO 7868 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:04:31.793  INFO 7868 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:04:31.943  INFO 7868 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:04:32.547  INFO 7868 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:04:32.601  INFO 7868 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:04:32.843 DEBUG 7868 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@67141d79
2019-06-18 13:04:32.844 DEBUG 7868 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:04:32.883  INFO 7868 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:04:32.979 DEBUG 7868 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.)]
2019-06-18 13:04:32.997 DEBUG 7868 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@45ed6700
2019-06-18 13:04:32.997 DEBUG 7868 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@9427dff
2019-06-18 13:04:33.268  INFO 7868 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:04:33.309  WARN 7868 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:04:33.609  INFO 7868 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:04:33.614  INFO 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.04 seconds (JVM running for 8.098)
2019-06-18 13:04:33.657 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:04:33.657 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:04:33.667 DEBUG 7868 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:04:40.757  INFO 7868 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:04:40.760  INFO 7868 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:04:40.768  INFO 7868 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2019-06-18 13:04:40.797 DEBUG 7868 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:04:40.797 DEBUG 7868 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:04:40.798 DEBUG 7868 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:04:40.798 DEBUG 7868 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:04:52.044 DEBUG 7868 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:04:52.045 DEBUG 7868 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:04:52.046 DEBUG 7868 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:04:52.046 DEBUG 7868 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:04:53.198 DEBUG 7868 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:04:53.200 DEBUG 7868 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:15:08.124  INFO 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 13912 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:15:08.134 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:15:08.134  INFO 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:15:08.374  INFO 13912 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:15:08.374  INFO 13912 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:15:10.004  INFO 13912 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:15:10.094  INFO 13912 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 13:15:10.564  INFO 13912 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ed17845c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:15:11.264  INFO 13912 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:15:11.304  INFO 13912 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:15:11.304  INFO 13912 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:15:11.604  INFO 13912 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:15:11.604  INFO 13912 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3230 ms
2019-06-18 13:15:11.774  INFO 13912 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:15:11.824  INFO 13912 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:15:11.894  INFO 13912 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:15:11.954  INFO 13912 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:15:11.954  INFO 13912 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:15:12.094  INFO 13912 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:15:12.254  INFO 13912 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:15:12.874  INFO 13912 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:15:12.914  INFO 13912 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:15:13.154 DEBUG 13912 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@27261d0d
2019-06-18 13:15:13.154 DEBUG 13912 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:15:13.194  INFO 13912 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:15:13.284 DEBUG 13912 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 13:15:13.304 DEBUG 13912 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@840f75f
2019-06-18 13:15:13.304 DEBUG 13912 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@34d66326
2019-06-18 13:15:13.514  INFO 13912 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:15:13.554  WARN 13912 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:15:13.844  INFO 13912 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:15:13.844  INFO 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.45 seconds (JVM running for 8.282)
2019-06-18 13:15:13.904 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:15:13.904 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:15:13.934 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:15:13.944 DEBUG 13912 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:15:20.015  INFO 13912 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:15:20.016  INFO 13912 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:15:20.024  INFO 13912 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2019-06-18 13:15:20.051 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:20.051 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:15:20.051 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:15:20.051 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:15:21.871 DEBUG 13912 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:21.872 DEBUG 13912 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:15:21.873 DEBUG 13912 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:15:21.873 DEBUG 13912 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:15:22.849 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:15:22.850 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:15:24.741 DEBUG 13912 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:24.742 DEBUG 13912 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:15:24.742 DEBUG 13912 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:15:24.742 DEBUG 13912 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:15:25.686 DEBUG 13912 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:15:25.686 DEBUG 13912 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:15:28.822 DEBUG 13912 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:28.822 DEBUG 13912 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:15:28.823 DEBUG 13912 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:15:28.823 DEBUG 13912 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:15:29.502 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:15:29.502 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:15:30.004 DEBUG 13912 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:30.004 DEBUG 13912 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:15:30.004 DEBUG 13912 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:15:30.004 DEBUG 13912 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:15:32.216 DEBUG 13912 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:32.217 DEBUG 13912 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:15:32.218 DEBUG 13912 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:15:32.218 DEBUG 13912 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:15:33.333 DEBUG 13912 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:15:33.334 DEBUG 13912 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:15:37.155 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:37.155 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:15:37.156 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:15:37.156 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:15:37.759 DEBUG 13912 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:37.759 DEBUG 13912 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:15:37.760 DEBUG 13912 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:15:37.760 DEBUG 13912 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:15:38.599 DEBUG 13912 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:15:38.600 DEBUG 13912 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:15:56.445 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:56.445 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:15:56.446 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:15:56.446 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:15:58.310 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:15:58.311 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:15:58.311 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:15:58.312 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:15:59.239 DEBUG 13912 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:15:59.240 DEBUG 13912 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:16:00.458 DEBUG 13912 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:16:00.459 DEBUG 13912 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:16:00.460 DEBUG 13912 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:16:00.461 DEBUG 13912 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:16:01.007 DEBUG 13912 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:16:01.007 DEBUG 13912 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:16:01.008 DEBUG 13912 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:16:01.008 DEBUG 13912 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:16:01.693 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:16:01.693 DEBUG 13912 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:16:03.295 DEBUG 13912 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:16:03.295 DEBUG 13912 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:16:03.296 DEBUG 13912 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:16:03.296 DEBUG 13912 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:16:03.918 DEBUG 13912 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:16:03.918 DEBUG 13912 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:16:03.919 DEBUG 13912 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:16:03.919 DEBUG 13912 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:16:04.789 DEBUG 13912 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:16:04.790 DEBUG 13912 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:16:07.906 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:16:07.907 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:16:07.907 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:16:07.907 DEBUG 13912 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:16:09.063 DEBUG 13912 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:16:09.064 DEBUG 13912 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:16:09.069 DEBUG 13912 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:16:09.070 DEBUG 13912 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:16:10.597 DEBUG 13912 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:16:23.299  INFO 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 8420 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:16:23.299 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:16:23.319  INFO 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:16:23.409  INFO 8420 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:16:23.409  INFO 8420 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:16:25.089  INFO 8420 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:16:25.179  INFO 8420 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 13:16:25.589  INFO 8420 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bf702a6f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:16:26.029  INFO 8420 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:16:26.079  INFO 8420 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:16:26.079  INFO 8420 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:16:26.329  INFO 8420 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:16:26.329  INFO 8420 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2920 ms
2019-06-18 13:16:26.499  INFO 8420 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:16:26.539  INFO 8420 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:16:26.599  INFO 8420 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:16:26.659  INFO 8420 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:16:26.659  INFO 8420 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:16:26.769  INFO 8420 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:16:26.949  INFO 8420 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:16:27.569  INFO 8420 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:16:27.609  INFO 8420 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:16:27.839 DEBUG 8420 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@3edf2d21
2019-06-18 13:16:27.839 DEBUG 8420 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:16:27.879  INFO 8420 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:16:27.968 DEBUG 8420 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 13:16:27.978 DEBUG 8420 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@7538ecc5
2019-06-18 13:16:27.978 DEBUG 8420 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@a40623a
2019-06-18 13:16:28.198  INFO 8420 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:16:28.238  WARN 8420 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:16:28.568  INFO 8420 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:16:28.578  INFO 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.119 seconds (JVM running for 8.295)
2019-06-18 13:16:28.628 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:16:28.628 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:16:28.638 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:16:28.638 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:16:28.638 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:16:28.648 DEBUG 8420 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:17:22.821  INFO 8420 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:17:22.822  INFO 8420 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:17:22.855  INFO 8420 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 32 ms
2019-06-18 13:17:22.898 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:17:22.898 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 13:17:22.899 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:17:22.899 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:17:26.869 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:17:26.870 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 13:17:26.870 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:17:26.870 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:17:28.093 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:17:28.094 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:17:33.497 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:17:33.497 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 11
2019-06-18 13:17:33.498 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:17:33.498 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:17:34.469 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:17:34.470 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 11
2019-06-18 13:17:34.470 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:17:34.470 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:17:35.396 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:17:35.397 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:17:49.961 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:17:49.962 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 10
2019-06-18 13:17:49.962 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:17:49.962 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:17:50.782 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:17:50.782 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 10
2019-06-18 13:17:50.783 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:17:50.783 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:17:51.477 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:17:51.477 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:02.364 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:02.365 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 9
2019-06-18 13:18:02.365 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:18:02.365 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:18:03.094 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:03.094 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 9
2019-06-18 13:18:03.094 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:18:03.094 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:18:03.957 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:03.958 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:20.264 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:20.264 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:18:20.265 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:18:20.265 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:18:20.886 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:20.886 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:18:20.887 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:18:20.887 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:18:21.756 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:21.757 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:24.448 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:24.448 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:18:24.449 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:18:24.449 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:18:25.044 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:25.045 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:18:25.046 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:18:25.046 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:18:26.052 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:26.053 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:28.127 DEBUG 8420 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:28.127 DEBUG 8420 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:18:28.128 DEBUG 8420 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:18:28.128 DEBUG 8420 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:18:28.692 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:28.692 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:18:28.693 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:18:28.693 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:18:29.645 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:29.646 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:30.903 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:30.903 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:18:30.904 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:18:30.904 DEBUG 8420 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:18:31.486 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:31.488 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:18:31.488 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:18:31.488 DEBUG 8420 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:18:32.646 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:32.647 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:34.010 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:34.011 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:18:34.011 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:18:34.011 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:18:34.620 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:34.620 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:18:34.621 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:18:34.621 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:18:35.844 DEBUG 8420 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:35.845 DEBUG 8420 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:41.407 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:41.408 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:18:41.409 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:18:41.409 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:18:42.156 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:42.157 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:18:42.157 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:18:42.157 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:18:42.917 DEBUG 8420 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:42.917 DEBUG 8420 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:43.704 DEBUG 8420 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:43.705 DEBUG 8420 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:18:43.705 DEBUG 8420 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:18:43.705 DEBUG 8420 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:18:44.235 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:44.236 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:18:44.237 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:18:44.237 DEBUG 8420 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:18:45.003 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:45.003 DEBUG 8420 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:45.671 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:45.671 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:18:45.672 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:18:45.672 DEBUG 8420 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:18:46.204 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:46.204 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:18:46.204 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:18:46.204 DEBUG 8420 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:18:47.003 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:18:47.003 DEBUG 8420 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:18:54.183 DEBUG 8420 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:18:54.187 DEBUG 8420 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:18:54.188 DEBUG 8420 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:18:54.188 DEBUG 8420 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:38:43.906  INFO 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 1644 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:38:43.936 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:38:43.946  INFO 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:38:44.046  INFO 1644 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:38:44.046  INFO 1644 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:38:45.815  INFO 1644 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:38:45.895  INFO 1644 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 13:38:46.285  INFO 1644 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fe13b18] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:38:46.705  INFO 1644 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:38:46.745  INFO 1644 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:38:46.745  INFO 1644 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:38:46.975  INFO 1644 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:38:46.975  INFO 1644 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2929 ms
2019-06-18 13:38:47.125  INFO 1644 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:38:47.235  INFO 1644 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:38:47.285  INFO 1644 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:38:47.345  INFO 1644 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:38:47.355  INFO 1644 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:38:47.465  INFO 1644 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:38:47.615  INFO 1644 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:38:48.615  INFO 1644 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:38:48.705  INFO 1644 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:38:49.125 DEBUG 1644 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@65273f5c
2019-06-18 13:38:49.125 DEBUG 1644 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:38:49.195  INFO 1644 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:38:49.415 DEBUG 1644 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 13:38:49.455 DEBUG 1644 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@32f838ee
2019-06-18 13:38:49.455 DEBUG 1644 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@534702c6
2019-06-18 13:38:50.285  INFO 1644 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:38:50.415  WARN 1644 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:38:51.225  INFO 1644 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:38:51.225  INFO 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 8.209 seconds (JVM running for 10.085)
2019-06-18 13:38:51.395 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:38:51.395 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:38:51.415 DEBUG 1644 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:39:00.111  INFO 1644 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:39:00.114  INFO 1644 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:39:00.220  INFO 1644 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 106 ms
2019-06-18 13:39:00.460 DEBUG 1644 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:00.460 DEBUG 1644 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 16
2019-06-18 13:39:00.461 DEBUG 1644 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:39:00.461 DEBUG 1644 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:39:10.752 DEBUG 1644 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:10.752 DEBUG 1644 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 16
2019-06-18 13:39:10.753 DEBUG 1644 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:39:10.753 DEBUG 1644 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:39:16.283 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:39:16.284 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:39:37.362 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:37.364 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 15
2019-06-18 13:39:37.365 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:39:37.366 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:39:41.519 DEBUG 1644 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:41.520 DEBUG 1644 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 15
2019-06-18 13:39:41.521 DEBUG 1644 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:39:41.521 DEBUG 1644 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:39:43.598 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:39:43.598 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:39:50.111 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:50.112 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 14
2019-06-18 13:39:50.113 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:39:50.113 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:39:51.632 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:51.633 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 14
2019-06-18 13:39:51.633 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:39:51.633 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:39:52.565 DEBUG 1644 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:39:52.565 DEBUG 1644 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:39:53.473 DEBUG 1644 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:53.474 DEBUG 1644 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 13
2019-06-18 13:39:53.474 DEBUG 1644 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:39:53.474 DEBUG 1644 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:39:54.270 DEBUG 1644 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:54.270 DEBUG 1644 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 13
2019-06-18 13:39:54.270 DEBUG 1644 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:39:54.270 DEBUG 1644 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:39:55.029 DEBUG 1644 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:39:55.029 DEBUG 1644 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:39:56.632 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:56.633 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 13:39:56.634 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:39:56.635 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:39:58.118 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:39:58.119 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 13:39:58.120 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:39:58.120 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:39:58.940 DEBUG 1644 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:39:58.941 DEBUG 1644 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:40:00.376 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:40:00.376 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 11
2019-06-18 13:40:00.377 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:40:00.377 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:40:01.030 DEBUG 1644 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:40:01.030 DEBUG 1644 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 11
2019-06-18 13:40:01.030 DEBUG 1644 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:40:01.030 DEBUG 1644 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:40:01.997 DEBUG 1644 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:40:01.997 DEBUG 1644 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:40:03.905 DEBUG 1644 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:40:03.905 DEBUG 1644 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 10
2019-06-18 13:40:03.905 DEBUG 1644 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:40:03.906 DEBUG 1644 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:40:04.551 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:40:04.552 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 10
2019-06-18 13:40:04.552 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:40:04.552 DEBUG 1644 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:40:05.422 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:40:05.425 DEBUG 1644 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:40:07.383 DEBUG 1644 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:40:07.384 DEBUG 1644 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 9
2019-06-18 13:40:07.385 DEBUG 1644 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:40:07.385 DEBUG 1644 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:40:08.142 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:40:08.143 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 9
2019-06-18 13:40:08.143 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:40:08.143 DEBUG 1644 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:40:09.509 DEBUG 1644 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:40:09.510 DEBUG 1644 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:41:00.711  INFO 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 7908 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:41:00.721 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:41:00.721  INFO 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:41:00.851  INFO 7908 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:41:00.851  INFO 7908 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:41:02.161  INFO 7908 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:41:02.251  INFO 7908 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 13:41:02.651  INFO 7908 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$87817b9f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:41:03.271  INFO 7908 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:41:03.291  INFO 7908 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:41:03.301  INFO 7908 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:41:03.551  INFO 7908 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:41:03.551  INFO 7908 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2700 ms
2019-06-18 13:41:03.701  INFO 7908 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:41:03.741  INFO 7908 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:41:03.811  INFO 7908 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:41:03.881  INFO 7908 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:41:03.881  INFO 7908 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:41:04.061  INFO 7908 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:41:04.211  INFO 7908 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:41:04.821  INFO 7908 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:41:04.861  INFO 7908 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:41:05.135 DEBUG 7908 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@18add4b2
2019-06-18 13:41:05.135 DEBUG 7908 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:41:05.175  INFO 7908 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:41:05.275 DEBUG 7908 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 13:41:05.285 DEBUG 7908 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@2dc9c29c
2019-06-18 13:41:05.285 DEBUG 7908 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@3d76c86d
2019-06-18 13:41:05.505  INFO 7908 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:41:05.545  WARN 7908 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:41:05.805  INFO 7908 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:41:05.815  INFO 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 5.904 seconds (JVM running for 7.756)
2019-06-18 13:41:05.855 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:41:05.855 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:41:05.865 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:41:05.865 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:41:05.865 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:41:05.865 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:41:05.865 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=17, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=18, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=19, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=20, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=21, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=22, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=23, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=24, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:41:05.875 DEBUG 7908 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:41:10.967  INFO 7908 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:41:10.969  INFO 7908 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:41:10.985  INFO 7908 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2019-06-18 13:41:11.058 DEBUG 7908 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:41:11.058 DEBUG 7908 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 20
2019-06-18 13:41:11.059 DEBUG 7908 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:41:11.060 DEBUG 7908 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:41:17.823 DEBUG 7908 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:41:17.823 DEBUG 7908 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 20
2019-06-18 13:41:17.824 DEBUG 7908 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:41:17.824 DEBUG 7908 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:<br /><br />- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:41:20.898 DEBUG 7908 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:41:20.898 DEBUG 7908 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:42:20.285  INFO 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 2152 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:42:20.295 DEBUG 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:42:20.295  INFO 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:42:20.435  INFO 2152 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:42:20.455  INFO 2152 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:42:22.114  INFO 2152 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:42:22.224  INFO 2152 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 100ms. Found 1 repository interfaces.
2019-06-18 13:42:22.794  INFO 2152 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a69d7211] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:42:23.224  INFO 2152 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:42:23.254  INFO 2152 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:42:23.254  INFO 2152 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:42:23.504  INFO 2152 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:42:23.504  INFO 2152 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3049 ms
2019-06-18 13:42:23.674  INFO 2152 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:42:23.734  INFO 2152 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:42:23.804  INFO 2152 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:42:23.864  INFO 2152 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:42:23.864  INFO 2152 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:42:23.984  INFO 2152 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:42:24.184  INFO 2152 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:42:24.804  INFO 2152 --- [restartedMain] o.h.t.schema.internal.SchemaCreatorImpl  : HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@22948c77'
2019-06-18 13:42:24.804  INFO 2152 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:42:24.854  INFO 2152 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:42:25.084 DEBUG 2152 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@3538f462
2019-06-18 13:42:25.084 DEBUG 2152 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:42:25.124  INFO 2152 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:42:25.214 DEBUG 2152 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 13:42:25.224 DEBUG 2152 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@6d47ccee
2019-06-18 13:42:25.234 DEBUG 2152 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@50454837
2019-06-18 13:42:25.444  INFO 2152 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:42:25.474  WARN 2152 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:42:25.744  INFO 2152 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:42:25.744  INFO 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.209 seconds (JVM running for 8.096)
2019-06-18 13:42:25.804 DEBUG 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:42:25.804 DEBUG 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:42:25.834 DEBUG 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:42:25.834 DEBUG 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:42:25.834 DEBUG 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:42:25.834 DEBUG 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:42:25.834 DEBUG 2152 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:42:38.242  INFO 2152 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:42:38.244  INFO 2152 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:42:38.265  INFO 2152 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 19 ms
2019-06-18 13:42:38.315 DEBUG 2152 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:42:38.315 DEBUG 2152 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:42:38.316 DEBUG 2152 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:42:38.316 DEBUG 2152 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:44:49.255  INFO 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 12296 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:44:49.265 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:44:49.265  INFO 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:44:49.425  INFO 12296 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:44:49.425  INFO 12296 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:44:50.945  INFO 12296 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:44:51.045  INFO 12296 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 13:44:51.415  INFO 12296 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$4869f319] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:44:51.835  INFO 12296 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:44:51.865  INFO 12296 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:44:51.865  INFO 12296 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:44:52.144  INFO 12296 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:44:52.154  INFO 12296 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2729 ms
2019-06-18 13:44:52.304  INFO 12296 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:44:52.374  INFO 12296 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:44:52.424  INFO 12296 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:44:52.484  INFO 12296 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:44:52.484  INFO 12296 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:44:52.604  INFO 12296 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:44:52.754  INFO 12296 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:44:53.334  INFO 12296 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:44:53.394  INFO 12296 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:44:53.624 DEBUG 12296 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@54fb90a3
2019-06-18 13:44:53.624 DEBUG 12296 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:44:53.654  INFO 12296 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:44:53.744 DEBUG 12296 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 13:44:53.764 DEBUG 12296 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@6e28515a
2019-06-18 13:44:53.764 DEBUG 12296 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@1adaabc
2019-06-18 13:44:54.024  INFO 12296 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:44:54.064  WARN 12296 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:44:54.324  INFO 12296 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:44:54.324  INFO 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 5.729 seconds (JVM running for 7.716)
2019-06-18 13:44:54.384 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:44:54.394 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:44:54.404 DEBUG 12296 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:45:00.084  INFO 12296 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:45:00.086  INFO 12296 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:45:00.100  INFO 12296 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2019-06-18 13:45:00.162 DEBUG 12296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:00.162 DEBUG 12296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:45:00.163 DEBUG 12296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:45:00.164 DEBUG 12296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:45:06.562 DEBUG 12296 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:06.562 DEBUG 12296 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:45:06.563 DEBUG 12296 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:45:06.563 DEBUG 12296 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:45:08.437 DEBUG 12296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:08.438 DEBUG 12296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:45:08.438 DEBUG 12296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:45:08.438 DEBUG 12296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:45:09.458 DEBUG 12296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:45:09.459 DEBUG 12296 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:45:11.989 DEBUG 12296 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:11.989 DEBUG 12296 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:45:11.990 DEBUG 12296 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:45:11.990 DEBUG 12296 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:45:12.724 DEBUG 12296 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:12.724 DEBUG 12296 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:45:12.724 DEBUG 12296 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:45:12.724 DEBUG 12296 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:45:13.866 DEBUG 12296 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:45:13.867 DEBUG 12296 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:45:19.870 DEBUG 12296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:19.871 DEBUG 12296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:45:19.871 DEBUG 12296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:45:19.871 DEBUG 12296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:45:20.738 DEBUG 12296 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:20.739 DEBUG 12296 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:45:20.739 DEBUG 12296 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:45:20.739 DEBUG 12296 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:45:21.531 DEBUG 12296 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:45:21.531 DEBUG 12296 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:45:45.064 DEBUG 12296 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:45.065 DEBUG 12296 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:45:45.066 DEBUG 12296 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:45:45.066 DEBUG 12296 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:45:45.994 DEBUG 12296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:45:45.995 DEBUG 12296 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:45:48.093 DEBUG 12296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:45:48.093 DEBUG 12296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:45:48.094 DEBUG 12296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:45:48.094 DEBUG 12296 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:47:16.155  INFO 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 10796 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:47:16.155 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:47:16.155  INFO 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:47:16.275  INFO 10796 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:47:16.275  INFO 10796 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:47:18.035  INFO 10796 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:47:18.145  INFO 10796 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 100ms. Found 1 repository interfaces.
2019-06-18 13:47:18.585  INFO 10796 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6b8f1d2b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:47:19.045  INFO 10796 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:47:19.085  INFO 10796 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:47:19.085  INFO 10796 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:47:19.315  INFO 10796 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:47:19.315  INFO 10796 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3030 ms
2019-06-18 13:47:19.485  INFO 10796 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:47:19.535  INFO 10796 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:47:19.615  INFO 10796 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:47:19.695  INFO 10796 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:47:19.695  INFO 10796 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:47:19.835  INFO 10796 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:47:19.975  INFO 10796 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:47:20.595  INFO 10796 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:47:20.655  INFO 10796 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:47:20.905 DEBUG 10796 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@1c3703f7
2019-06-18 13:47:20.905 DEBUG 10796 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:47:20.935  INFO 10796 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:47:21.025 DEBUG 10796 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 13:47:21.045 DEBUG 10796 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@4fb1f07d
2019-06-18 13:47:21.045 DEBUG 10796 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@358a9ac0
2019-06-18 13:47:21.275  INFO 10796 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:47:21.305  WARN 10796 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:47:21.615  INFO 10796 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:47:21.615  INFO 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.12 seconds (JVM running for 8.29)
2019-06-18 13:47:21.675 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:47:21.675 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:47:21.685 DEBUG 10796 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:48:07.072  INFO 10796 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:48:07.073  INFO 10796 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:48:07.089  INFO 10796 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2019-06-18 13:48:07.140 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:07.140 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:48:07.140 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:48:07.141 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:48:11.115 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:11.116 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:48:11.117 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:48:11.117 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:48:11.972 DEBUG 10796 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:48:11.973 DEBUG 10796 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:48:13.524 DEBUG 10796 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:13.525 DEBUG 10796 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:48:13.526 DEBUG 10796 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:48:13.526 DEBUG 10796 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:48:14.105 DEBUG 10796 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:14.105 DEBUG 10796 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:48:14.105 DEBUG 10796 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:48:14.105 DEBUG 10796 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:48:14.858 DEBUG 10796 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:48:14.858 DEBUG 10796 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:48:18.030 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:18.031 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:48:18.032 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:48:18.032 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:48:18.562 DEBUG 10796 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:18.562 DEBUG 10796 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:48:18.562 DEBUG 10796 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:48:18.562 DEBUG 10796 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:48:19.084 DEBUG 10796 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:48:19.084 DEBUG 10796 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:48:19.878 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:19.878 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:48:19.878 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:48:19.878 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:48:20.377 DEBUG 10796 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:20.378 DEBUG 10796 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:48:20.378 DEBUG 10796 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:48:20.378 DEBUG 10796 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:48:20.928 DEBUG 10796 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:48:20.928 DEBUG 10796 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:48:30.125 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:30.126 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:48:30.127 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:48:30.128 DEBUG 10796 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:48:31.394 DEBUG 10796 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:48:31.395 DEBUG 10796 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:48:31.395 DEBUG 10796 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:48:31.395 DEBUG 10796 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:48:32.073 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:48:32.073 DEBUG 10796 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:48:44.085  INFO 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 2316 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:48:44.085 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:48:44.095  INFO 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:48:44.235  INFO 2316 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:48:44.235  INFO 2316 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:48:46.005  INFO 2316 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:48:46.095  INFO 2316 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 90ms. Found 1 repository interfaces.
2019-06-18 13:48:46.515  INFO 2316 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f737d11] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:48:46.965  INFO 2316 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:48:46.995  INFO 2316 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:48:46.995  INFO 2316 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:48:47.225  INFO 2316 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:48:47.225  INFO 2316 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2990 ms
2019-06-18 13:48:47.375  INFO 2316 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:48:47.425  INFO 2316 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:48:47.485  INFO 2316 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:48:47.545  INFO 2316 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:48:47.545  INFO 2316 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:48:47.655  INFO 2316 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:48:47.805  INFO 2316 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:48:48.365  INFO 2316 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:48:48.405  INFO 2316 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:48:48.655 DEBUG 2316 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@139290bb
2019-06-18 13:48:48.655 DEBUG 2316 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:48:48.685  INFO 2316 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:48:48.775 DEBUG 2316 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!)]
2019-06-18 13:48:48.795 DEBUG 2316 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@550b24a8
2019-06-18 13:48:48.795 DEBUG 2316 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@71728d69
2019-06-18 13:48:49.015  INFO 2316 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:48:49.055  WARN 2316 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:48:49.355  INFO 2316 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:48:49.365  INFO 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.0 seconds (JVM running for 7.977)
2019-06-18 13:48:49.415 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:48:49.415 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:48:49.425 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:48:49.425 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:48:49.425 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:48:49.425 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:48:49.425 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:48:49.425 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=13, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=14, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=15, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=16, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:48:49.435 DEBUG 2316 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:49:03.209  INFO 2316 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:49:03.211  INFO 2316 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:49:03.225  INFO 2316 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2019-06-18 13:49:03.280 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:03.281 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 13:49:03.282 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:49:03.282 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:49:05.717 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:05.718 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 12
2019-06-18 13:49:05.719 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:49:05.719 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:49:06.596 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:06.609 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:07.299 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:07.299 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 11
2019-06-18 13:49:07.299 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:49:07.299 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:49:07.712 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:07.712 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 11
2019-06-18 13:49:07.713 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:49:07.713 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:49:08.280 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:08.280 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:08.812 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:08.813 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 10
2019-06-18 13:49:08.813 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:49:08.813 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:49:09.273 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:09.273 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 10
2019-06-18 13:49:09.274 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:49:09.274 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:49:10.958 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:10.962 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 10
2019-06-18 13:49:10.963 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:49:10.964 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:49:11.992 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:11.993 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 10
2019-06-18 13:49:11.994 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:49:11.994 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:49:12.864 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:12.865 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:13.451 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:13.451 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 9
2019-06-18 13:49:13.452 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:49:13.452 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:49:13.985 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:13.985 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 9
2019-06-18 13:49:13.986 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:49:13.986 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:49:14.680 DEBUG 2316 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:14.680 DEBUG 2316 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:15.099 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:15.100 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:49:15.100 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:49:15.101 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:49:15.567 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:15.568 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:49:15.568 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:49:15.568 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:49:16.176 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:16.176 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:16.659 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:16.659 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:49:16.659 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:49:16.659 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:49:17.584 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:17.585 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:49:17.586 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:49:17.586 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:49:18.199 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:18.200 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:18.691 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:18.691 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:49:18.692 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:49:18.692 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:49:19.243 DEBUG 2316 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:19.244 DEBUG 2316 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:49:19.245 DEBUG 2316 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:49:19.245 DEBUG 2316 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:49:19.928 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:19.928 DEBUG 2316 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:20.395 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:20.395 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:49:20.395 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:49:20.396 DEBUG 2316 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:49:21.368 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:21.369 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:49:21.369 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:49:21.370 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:49:22.183 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:22.184 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:22.667 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:22.667 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:49:22.667 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:49:22.667 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:49:23.192 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:23.192 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:49:23.193 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:49:23.193 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:49:24.159 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:24.160 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:26.996 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:26.997 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:49:26.997 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:49:26.997 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:49:27.672 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:27.672 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:49:27.672 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:49:27.673 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:49:28.399 DEBUG 2316 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:28.400 DEBUG 2316 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:29.052 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:29.052 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:49:29.053 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:49:29.053 DEBUG 2316 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:49:29.641 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:29.641 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:49:29.642 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:49:29.642 DEBUG 2316 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

- the internal state of every object is protected by hiding its attributes
- it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
- it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:49:30.367 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:30.367 DEBUG 2316 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:31.771 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:31.772 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:49:31.772 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:49:31.772 DEBUG 2316 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:49:32.231 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:32.232 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:49:32.232 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:49:32.232 DEBUG 2316 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:49:32.735 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:49:32.735 DEBUG 2316 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:49:38.515 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:49:38.516 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:49:38.516 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:49:38.516 DEBUG 2316 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:50:48.411  INFO 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 1072 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:50:48.431 DEBUG 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:50:48.441  INFO 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:50:48.571  INFO 1072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:50:48.571  INFO 1072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:50:50.281  INFO 1072 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:50:50.371  INFO 1072 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 13:50:50.791  INFO 1072 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7adcdb00] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:50:51.211  INFO 1072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:50:51.251  INFO 1072 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:50:51.251  INFO 1072 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:50:51.481  INFO 1072 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:50:51.481  INFO 1072 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2910 ms
2019-06-18 13:50:51.641  INFO 1072 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:50:51.691  INFO 1072 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:50:51.761  INFO 1072 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:50:51.811  INFO 1072 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:50:51.821  INFO 1072 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:50:51.941  INFO 1072 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:50:52.091  INFO 1072 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:50:52.641  INFO 1072 --- [restartedMain] o.h.t.schema.internal.SchemaCreatorImpl  : HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@549c016a'
2019-06-18 13:50:52.641  INFO 1072 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:50:52.681  INFO 1072 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:50:52.921 DEBUG 1072 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@f23530e
2019-06-18 13:50:52.931 DEBUG 1072 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:50:52.971  INFO 1072 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:50:53.051 DEBUG 1072 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.), QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.)]
2019-06-18 13:50:53.071 DEBUG 1072 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@2fd869b0
2019-06-18 13:50:53.071 DEBUG 1072 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@29fc8ee1
2019-06-18 13:50:53.301  INFO 1072 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:50:53.341  WARN 1072 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:50:53.621  INFO 1072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:50:53.631  INFO 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.03 seconds (JVM running for 7.827)
2019-06-18 13:50:53.691 DEBUG 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:50:53.691 DEBUG 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:50:53.701 DEBUG 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:50:53.701 DEBUG 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:50:53.701 DEBUG 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:50:53.701 DEBUG 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:50:53.701 DEBUG 1072 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:51:07.012  INFO 1072 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:51:07.028  INFO 1072 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:51:07.045  INFO 1072 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2019-06-18 13:51:07.143 DEBUG 1072 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:51:07.144 DEBUG 1072 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:51:07.145 DEBUG 1072 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:51:07.145 DEBUG 1072 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:53:33.642  INFO 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 12444 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:53:33.652 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:53:33.652  INFO 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:53:33.802  INFO 12444 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:53:33.802  INFO 12444 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:53:35.442  INFO 12444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:53:35.532  INFO 12444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 13:53:35.922  INFO 12444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$44f095a1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:53:36.452  INFO 12444 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:53:36.502  INFO 12444 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:53:36.502  INFO 12444 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:53:36.732  INFO 12444 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:53:36.732  INFO 12444 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2930 ms
2019-06-18 13:53:36.882  INFO 12444 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:53:36.942  INFO 12444 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:53:37.002  INFO 12444 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:53:37.062  INFO 12444 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:53:37.062  INFO 12444 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:53:37.182  INFO 12444 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:53:37.332  INFO 12444 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:53:37.892  INFO 12444 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:53:37.932  INFO 12444 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:53:38.172 DEBUG 12444 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@410fc875
2019-06-18 13:53:38.172 DEBUG 12444 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:53:38.212  INFO 12444 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:53:38.302 DEBUG 12444 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.)]
2019-06-18 13:53:38.312 DEBUG 12444 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@51c14806
2019-06-18 13:53:38.322 DEBUG 12444 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@100d28fd
2019-06-18 13:53:38.512  INFO 12444 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:53:38.552  WARN 12444 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:53:38.852  INFO 12444 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:53:38.862  INFO 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 5.92 seconds (JVM running for 7.816)
2019-06-18 13:53:38.912 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:53:38.912 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:53:38.912 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:53:38.912 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:53:38.912 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:53:38.912 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:53:38.912 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:53:38.912 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:53:38.922 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:53:38.922 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:53:38.922 DEBUG 12444 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:53:43.216  INFO 12444 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:53:43.218  INFO 12444 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:53:43.231  INFO 12444 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2019-06-18 13:53:43.265 DEBUG 12444 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:53:43.265 DEBUG 12444 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:53:43.265 DEBUG 12444 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:53:43.265 DEBUG 12444 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:53:49.133 DEBUG 12444 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:53:49.134 DEBUG 12444 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 4
2019-06-18 13:53:49.134 DEBUG 12444 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:53:49.134 DEBUG 12444 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:53:50.411 DEBUG 12444 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:53:50.412 DEBUG 12444 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:53:58.281 DEBUG 12444 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:53:58.282 DEBUG 12444 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:53:58.282 DEBUG 12444 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:53:58.282 DEBUG 12444 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:53:59.127 DEBUG 12444 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:53:59.128 DEBUG 12444 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:54:47.662 DEBUG 12444 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:54:47.663 DEBUG 12444 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:54:47.664 DEBUG 12444 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:54:47.665 DEBUG 12444 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:54:48.585 DEBUG 12444 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:54:48.585 DEBUG 12444 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:54:48.586 DEBUG 12444 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:54:48.586 DEBUG 12444 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:54:49.407 DEBUG 12444 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:54:49.408 DEBUG 12444 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:54:51.202 DEBUG 12444 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:54:51.203 DEBUG 12444 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:54:51.204 DEBUG 12444 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:54:51.204 DEBUG 12444 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:54:52.054 DEBUG 12444 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:54:52.055 DEBUG 12444 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:54:52.055 DEBUG 12444 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:54:52.055 DEBUG 12444 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:54:54.975 DEBUG 12444 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:54:54.976 DEBUG 12444 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:03.230 DEBUG 12444 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:03.232 DEBUG 12444 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:55:03.233 DEBUG 12444 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:55:03.234 DEBUG 12444 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: 
2019-06-18 13:55:13.306  INFO 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Starting JavaQuizApplication on 4-91-01-049983kozicki with PID 9876 (C:\Users\laboratorium\IdeaProjects\java-quiz\target\classes started by laboratorium in C:\Users\laboratorium\IdeaProjects\java-quiz)
2019-06-18 13:55:13.316 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Running with Spring Boot v2.1.4.RELEASE, Spring v5.1.6.RELEASE
2019-06-18 13:55:13.316  INFO 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : No active profile set, falling back to default profiles: default
2019-06-18 13:55:13.436  INFO 9876 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-06-18 13:55:13.436  INFO 9876 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-06-18 13:55:14.996  INFO 9876 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-06-18 13:55:15.076  INFO 9876 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80ms. Found 1 repository interfaces.
2019-06-18 13:55:15.526  INFO 9876 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8eb42173] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-18 13:55:15.986  INFO 9876 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-06-18 13:55:16.036  INFO 9876 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-06-18 13:55:16.036  INFO 9876 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.17]
2019-06-18 13:55:16.326  INFO 9876 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-06-18 13:55:16.326  INFO 9876 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2890 ms
2019-06-18 13:55:16.506  INFO 9876 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-06-18 13:55:16.546  INFO 9876 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-06-18 13:55:16.606  INFO 9876 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-06-18 13:55:16.666  INFO 9876 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.9.Final}
2019-06-18 13:55:16.666  INFO 9876 --- [restartedMain] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-06-18 13:55:16.776  INFO 9876 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-06-18 13:55:16.926  INFO 9876 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-06-18 13:55:17.666  INFO 9876 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-06-18 13:55:17.716  INFO 9876 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-06-18 13:55:18.026 DEBUG 9876 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : StartServiceImpl(): org.springframework.data.jpa.repository.support.SimpleJpaRepository@1159cfde
2019-06-18 13:55:18.026 DEBUG 9876 --- [restartedMain] c.r.j.service.impl.StartServiceImpl      : getQuestions() from StartServiceImpl
2019-06-18 13:55:18.076  INFO 9876 --- [restartedMain] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
2019-06-18 13:55:18.186 DEBUG 9876 --- [restartedMain] c.r.j.data.impl.DummyQuizRepository      : DummyQuizRepository(), quizExercises: [QuizEntity(id=null, question=What's your favorite color?, answer=Green! No, red! NOOOOOO!), QuizEntity(id=null, question=What is your quest?, answer=To find the Holy Grail.), QuizEntity(id=null, question=What is your name?, answer=Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.)]
2019-06-18 13:55:18.206 DEBUG 9876 --- [restartedMain] c.r.javaquiz.service.impl.DummyService   : DummyService(): com.rybickim.javaquiz.data.impl.DummyQuizRepository@6f07e5e7
2019-06-18 13:55:18.206 DEBUG 9876 --- [restartedMain] c.r.j.c.impl.HomeRestControllerImpl      : HomeRestControllerImpl(): com.rybickim.javaquiz.service.impl.DummyService@6cb505e7
2019-06-18 13:55:18.476  INFO 9876 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-06-18 13:55:18.516  WARN 9876 --- [restartedMain] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-06-18 13:55:18.786  INFO 9876 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-06-18 13:55:18.786  INFO 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Started JavaQuizApplication in 6.19 seconds (JVM running for 8.013)
2019-06-18 13:55:18.846 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : Quizzes found with findAll():
2019-06-18 13:55:18.846 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : -------------------------------
2019-06-18 13:55:18.846 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=1, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:55:18.846 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=2, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=3, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=4, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=5, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=6, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=7, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=8, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=9, question=What is Encapsulation?, answer=Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=10, question=What is Polymorphism?, answer=Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=11, question=What is Inheritance?, answer=Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : QuizEntity(id=12, question=What is Abstraction?, answer=Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.)
2019-06-18 13:55:18.856 DEBUG 9876 --- [restartedMain] c.rybickim.javaquiz.JavaQuizApplication  : 
2019-06-18 13:55:24.337  INFO 9876 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-06-18 13:55:24.339  INFO 9876 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-06-18 13:55:24.354  INFO 9876 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2019-06-18 13:55:24.423 DEBUG 9876 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:24.424 DEBUG 9876 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:55:24.424 DEBUG 9876 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:55:24.424 DEBUG 9876 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:55:30.384 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:30.384 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 8
2019-06-18 13:55:30.385 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:55:30.385 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:55:31.170 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:55:31.170 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:32.254 DEBUG 9876 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:32.255 DEBUG 9876 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:55:32.256 DEBUG 9876 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:55:32.256 DEBUG 9876 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:55:32.798 DEBUG 9876 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:32.798 DEBUG 9876 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 7
2019-06-18 13:55:32.798 DEBUG 9876 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:55:32.798 DEBUG 9876 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:55:33.406 DEBUG 9876 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:55:33.406 DEBUG 9876 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:34.497 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:34.497 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:55:34.498 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:55:34.498 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:55:35.215 DEBUG 9876 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:35.216 DEBUG 9876 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 6
2019-06-18 13:55:35.216 DEBUG 9876 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Abstraction?
2019-06-18 13:55:35.216 DEBUG 9876 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Abstraction is the process of separating ideas from specific instances and thus, of developing classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods. The abstration technique aims to separate the implementation details of a class from its behavior.
2019-06-18 13:55:36.974 DEBUG 9876 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:55:36.975 DEBUG 9876 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:38.082 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:38.082 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:55:38.083 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:55:38.083 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:55:38.599 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:38.600 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 5
2019-06-18 13:55:38.600 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:55:38.600 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:55:39.248 DEBUG 9876 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:55:39.248 DEBUG 9876 --- [http-nio-8080-exec-5] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:39.275 DEBUG 9876 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:55:39.276 DEBUG 9876 --- [http-nio-8080-exec-6] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:39.777 DEBUG 9876 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:39.778 DEBUG 9876 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:55:39.778 DEBUG 9876 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:55:39.778 DEBUG 9876 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:55:40.174 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:40.174 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 3
2019-06-18 13:55:40.175 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: What is Inheritance?
2019-06-18 13:55:40.175 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: Inheritance provides an object with the ability to acquire the fields and methods of another class, called the base class. Inheritance supplies re‑usability of code and can be used to add additional features to an existing class, without modifying it.
2019-06-18 13:55:40.822 DEBUG 9876 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:55:40.822 DEBUG 9876 --- [http-nio-8080-exec-10] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:41.400 DEBUG 9876 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:41.400 DEBUG 9876 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:55:41.401 DEBUG 9876 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:55:41.401 DEBUG 9876 --- [http-nio-8080-exec-9] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:55:42.030 DEBUG 9876 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:42.031 DEBUG 9876 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 2
2019-06-18 13:55:42.031 DEBUG 9876 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : question: What is Polymorphism?
2019-06-18 13:55:42.032 DEBUG 9876 --- [http-nio-8080-exec-2] c.r.j.c.impl.HomeControllerImpl          : answer: Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type.
2019-06-18 13:55:42.805 DEBUG 9876 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:55:42.805 DEBUG 9876 --- [http-nio-8080-exec-1] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:43.435 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:43.435 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:55:43.436 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:55:43.436 DEBUG 9876 --- [http-nio-8080-exec-3] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:55:44.118 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:44.118 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 1
2019-06-18 13:55:44.118 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : question: What is Encapsulation?
2019-06-18 13:55:44.118 DEBUG 9876 --- [http-nio-8080-exec-4] c.r.j.c.impl.HomeControllerImpl          : answer: Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three explicit access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:

• the internal state of every object is protected by hiding its attributes
• it increases usability and maintenance of code, because the behavior of an object can be independently changed or extended
• it improves modularity by preventing objects from interacting with each other in an undesired way
2019-06-18 13:55:44.976 DEBUG 9876 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : removeElement()
2019-06-18 13:55:44.977 DEBUG 9876 --- [http-nio-8080-exec-7] c.r.j.c.impl.HomeControllerImpl          : list element removed
2019-06-18 13:55:46.898 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : homePage()
2019-06-18 13:55:46.898 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : quizExerciseCount: 0
2019-06-18 13:55:46.898 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : question: 
2019-06-18 13:55:46.898 DEBUG 9876 --- [http-nio-8080-exec-8] c.r.j.c.impl.HomeControllerImpl          : answer: 
